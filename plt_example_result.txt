<FUNCTION_TOKEN, 'function'>
<IDENTIFIER_TOKEN, 'isPrime'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'n'>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
<IF_TOKEN, 'if'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'n'>
<EQUAL_TOKEN, '=='>
<INT_LITERAL_TOKEN, '2'>
<RIGHT_PAREN_TOKEN, ')'>
<RETURN_TOKEN, 'return'>
<TRUE_TOKEN, 'true'>
<SEMICOLON_TOKEN, ';'>
<ELSE_TOKEN, 'else'>
<IF_TOKEN, 'if'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'n'>
<LESS_TOKEN, '<'>
<INT_LITERAL_TOKEN, '2'>
<OR_TOKEN, '||'>
<IDENTIFIER_TOKEN, 'n'>
<MODULO_TOKEN, '%'>
<INT_LITERAL_TOKEN, '2'>
<EQUAL_TOKEN, '=='>
<INT_LITERAL_TOKEN, '0'>
<RIGHT_PAREN_TOKEN, ')'>
<RETURN_TOKEN, 'return'>
<FALSE_TOKEN, 'false'>
<SEMICOLON_TOKEN, ';'>
<FOR_TOKEN, 'for'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'd'>
<ASSIGN_TOKEN, '='>
<INT_LITERAL_TOKEN, '3'>
<SEMICOLON_TOKEN, ';'>
<IDENTIFIER_TOKEN, 'd'>
<MULTIPLY_TOKEN, '*'>
<IDENTIFIER_TOKEN, 'd'>
<LESS_EQUAL_TOKEN, '<='>
<IDENTIFIER_TOKEN, 'n'>
<SEMICOLON_TOKEN, ';'>
<IDENTIFIER_TOKEN, 'd'>
<ASSIGN_TOKEN, '='>
<IDENTIFIER_TOKEN, 'd'>
<PLUS_TOKEN, '+'>
<INT_LITERAL_TOKEN, '2'>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
<IF_TOKEN, 'if'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'n'>
<MODULO_TOKEN, '%'>
<IDENTIFIER_TOKEN, 'd'>
<EQUAL_TOKEN, '=='>
<INT_LITERAL_TOKEN, '0'>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
<RETURN_TOKEN, 'return'>
<IDENTIFIER_TOKEN, 'fal'>
Error: Unrecognized character '@'
Error: Unrecognized character '@'
Error: Unrecognized character '@'
<IDENTIFIER_TOKEN, 'se'>
<SEMICOLON_TOKEN, ';'>
<RIGHT_BRACE_TOKEN, '}'>
<RIGHT_BRACE_TOKEN, '}'>
<RIGHT_BRACE_TOKEN, '}'>
<FUNCTION_TOKEN, 'function'>
<IDENTIFIER_TOKEN, 'main'>
<LEFT_PAREN_TOKEN, '('>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
Error: Invalid identifier '1n'
<ASSIGN_TOKEN, '='>
<IDENTIFIER_TOKEN, 'input_int'>
<LEFT_PAREN_TOKEN, '('>
<RIGHT_PAREN_TOKEN, ')'>
<SEMICOLON_TOKEN, ';'>
<FOR_TOKEN, 'for'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'i'>
<ASSIGN_TOKEN, '='>
<INT_LITERAL_TOKEN, '0'>
<SEMICOLON_TOKEN, ';'>
<IDENTIFIER_TOKEN, 'i'>
<LESS_EQUAL_TOKEN, '<='>
<IDENTIFIER_TOKEN, 'n'>
<MINUS_TOKEN, '-'>
<INT_LITERAL_TOKEN, '1'>
<SEMICOLON_TOKEN, ';'>
<INCREMENT_TOKEN, '++'>
<IDENTIFIER_TOKEN, 'i'>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
<IF_TOKEN, 'if'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'isPrime'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'i'>
<RIGHT_PAREN_TOKEN, ')'>
<RIGHT_PAREN_TOKEN, ')'>
<LEFT_BRACE_TOKEN, '{'>
<IDENTIFIER_TOKEN, 'output_int'>
<LEFT_PAREN_TOKEN, '('>
<IDENTIFIER_TOKEN, 'i'>
<RIGHT_PAREN_TOKEN, ')'>
<SEMICOLON_TOKEN, ';'>
<RIGHT_BRACE_TOKEN, '}'>
<RIGHT_BRACE_TOKEN, '}'>
<RETURN_TOKEN, 'return'>
<INT_LITERAL_TOKEN, '0'>
<SEMICOLON_TOKEN, ';'>
<RIGHT_BRACE_TOKEN, '}'>
